{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPXjA78+EzNnFkdg7746CqY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/calebQWEB/Dictionary-APP/blob/main/AI-DEBATE%20LANGCHAIN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jfy9PsqSyyZN",
        "outputId": "f6dcaff8-3f3e-4c80-b5d7-0de859d29223"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: langchain in /usr/local/lib/python3.11/dist-packages (0.3.25)\n",
            "Requirement already satisfied: langchain-community in /usr/local/lib/python3.11/dist-packages (0.3.25)\n",
            "Requirement already satisfied: chromadb in /usr/local/lib/python3.11/dist-packages (1.0.13)\n",
            "Requirement already satisfied: sentence-transformers in /usr/local/lib/python3.11/dist-packages (4.1.0)\n",
            "Requirement already satisfied: openai in /usr/local/lib/python3.11/dist-packages (1.86.0)\n",
            "Requirement already satisfied: langchain-core<1.0.0,>=0.3.58 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.65)\n",
            "Requirement already satisfied: langchain-text-splitters<1.0.0,>=0.3.8 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.8)\n",
            "Requirement already satisfied: langsmith<0.4,>=0.1.17 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.45)\n",
            "Requirement already satisfied: pydantic<3.0.0,>=2.7.4 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.11.7)\n",
            "Requirement already satisfied: SQLAlchemy<3,>=1.4 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.0.41)\n",
            "Requirement already satisfied: requests<3,>=2 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.32.3)\n",
            "Requirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.11/dist-packages (from langchain) (6.0.2)\n",
            "Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (3.11.15)\n",
            "Requirement already satisfied: tenacity!=8.4.0,<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (9.1.2)\n",
            "Requirement already satisfied: dataclasses-json<0.7,>=0.5.7 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (0.6.7)\n",
            "Requirement already satisfied: pydantic-settings<3.0.0,>=2.4.0 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (2.9.1)\n",
            "Requirement already satisfied: httpx-sse<1.0.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (0.4.0)\n",
            "Requirement already satisfied: numpy>=1.26.2 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (2.0.2)\n",
            "Requirement already satisfied: build>=1.0.3 in /usr/local/lib/python3.11/dist-packages (from chromadb) (1.2.2.post1)\n",
            "Requirement already satisfied: pybase64>=1.4.1 in /usr/local/lib/python3.11/dist-packages (from chromadb) (1.4.1)\n",
            "Requirement already satisfied: uvicorn>=0.18.3 in /usr/local/lib/python3.11/dist-packages (from uvicorn[standard]>=0.18.3->chromadb) (0.34.3)\n",
            "Requirement already satisfied: posthog>=2.4.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (5.1.0)\n",
            "Requirement already satisfied: typing-extensions>=4.5.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (4.14.0)\n",
            "Requirement already satisfied: onnxruntime>=1.14.1 in /usr/local/lib/python3.11/dist-packages (from chromadb) (1.22.0)\n",
            "Requirement already satisfied: opentelemetry-api>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (1.34.1)\n",
            "Requirement already satisfied: opentelemetry-exporter-otlp-proto-grpc>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (1.34.1)\n",
            "Requirement already satisfied: opentelemetry-sdk>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (1.34.1)\n",
            "Requirement already satisfied: tokenizers>=0.13.2 in /usr/local/lib/python3.11/dist-packages (from chromadb) (0.21.1)\n",
            "Requirement already satisfied: pypika>=0.48.9 in /usr/local/lib/python3.11/dist-packages (from chromadb) (0.48.9)\n",
            "Requirement already satisfied: tqdm>=4.65.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (4.67.1)\n",
            "Requirement already satisfied: overrides>=7.3.1 in /usr/local/lib/python3.11/dist-packages (from chromadb) (7.7.0)\n",
            "Requirement already satisfied: importlib-resources in /usr/local/lib/python3.11/dist-packages (from chromadb) (6.5.2)\n",
            "Requirement already satisfied: grpcio>=1.58.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (1.73.0)\n",
            "Requirement already satisfied: bcrypt>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from chromadb) (4.3.0)\n",
            "Requirement already satisfied: typer>=0.9.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (0.16.0)\n",
            "Requirement already satisfied: kubernetes>=28.1.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (33.1.0)\n",
            "Requirement already satisfied: mmh3>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from chromadb) (5.1.0)\n",
            "Requirement already satisfied: orjson>=3.9.12 in /usr/local/lib/python3.11/dist-packages (from chromadb) (3.10.18)\n",
            "Requirement already satisfied: httpx>=0.27.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (0.28.1)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (13.9.4)\n",
            "Requirement already satisfied: jsonschema>=4.19.0 in /usr/local/lib/python3.11/dist-packages (from chromadb) (4.24.0)\n",
            "Requirement already satisfied: transformers<5.0.0,>=4.41.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (4.52.4)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (2.6.0+cu124)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (1.6.1)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (1.15.3)\n",
            "Requirement already satisfied: huggingface-hub>=0.20.0 in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (0.33.0)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from sentence-transformers) (11.2.1)\n",
            "Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from openai) (4.9.0)\n",
            "Requirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from openai) (1.9.0)\n",
            "Requirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from openai) (0.10.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.11/dist-packages (from openai) (1.3.1)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.7.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (6.4.4)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (0.3.2)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.20.1)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.5.0->openai) (3.10)\n",
            "Requirement already satisfied: packaging>=19.1 in /usr/local/lib/python3.11/dist-packages (from build>=1.0.3->chromadb) (24.2)\n",
            "Requirement already satisfied: pyproject_hooks in /usr/local/lib/python3.11/dist-packages (from build>=1.0.3->chromadb) (1.2.0)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.11/dist-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community) (3.26.1)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community) (0.9.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.27.0->chromadb) (2025.6.15)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.27.0->chromadb) (1.0.9)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.27.0->chromadb) (0.16.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (3.18.0)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (2025.3.2)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.20.0->sentence-transformers) (1.1.3)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.19.0->chromadb) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.19.0->chromadb) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.19.0->chromadb) (0.25.1)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (1.17.0)\n",
            "Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (2.9.0.post0)\n",
            "Requirement already satisfied: google-auth>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (2.38.0)\n",
            "Requirement already satisfied: websocket-client!=0.40.0,!=0.41.*,!=0.42.*,>=0.32.0 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (1.8.0)\n",
            "Requirement already satisfied: requests-oauthlib in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (2.0.0)\n",
            "Requirement already satisfied: oauthlib>=3.2.2 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (3.2.2)\n",
            "Requirement already satisfied: urllib3>=1.24.2 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (2.4.0)\n",
            "Requirement already satisfied: durationpy>=0.7 in /usr/local/lib/python3.11/dist-packages (from kubernetes>=28.1.0->chromadb) (0.10)\n",
            "Requirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.58->langchain) (1.33)\n",
            "Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (1.0.0)\n",
            "Requirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (0.23.0)\n",
            "Requirement already satisfied: coloredlogs in /usr/local/lib/python3.11/dist-packages (from onnxruntime>=1.14.1->chromadb) (15.0.1)\n",
            "Requirement already satisfied: flatbuffers in /usr/local/lib/python3.11/dist-packages (from onnxruntime>=1.14.1->chromadb) (25.2.10)\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.11/dist-packages (from onnxruntime>=1.14.1->chromadb) (5.29.5)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.11/dist-packages (from onnxruntime>=1.14.1->chromadb) (1.13.1)\n",
            "Requirement already satisfied: importlib-metadata<8.8.0,>=6.0 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-api>=1.2.0->chromadb) (8.7.0)\n",
            "Requirement already satisfied: googleapis-common-protos~=1.52 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-exporter-otlp-proto-grpc>=1.2.0->chromadb) (1.70.0)\n",
            "Requirement already satisfied: opentelemetry-exporter-otlp-proto-common==1.34.1 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-exporter-otlp-proto-grpc>=1.2.0->chromadb) (1.34.1)\n",
            "Requirement already satisfied: opentelemetry-proto==1.34.1 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-exporter-otlp-proto-grpc>=1.2.0->chromadb) (1.34.1)\n",
            "Requirement already satisfied: opentelemetry-semantic-conventions==0.55b1 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-sdk>=1.2.0->chromadb) (0.55b1)\n",
            "Requirement already satisfied: backoff>=1.10.0 in /usr/local/lib/python3.11/dist-packages (from posthog>=2.4.0->chromadb) (2.2.1)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain) (0.4.1)\n",
            "Requirement already satisfied: python-dotenv>=0.21.0 in /usr/local/lib/python3.11/dist-packages (from pydantic-settings<3.0.0,>=2.4.0->langchain-community) (1.1.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain) (3.4.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->chromadb) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->chromadb) (2.19.1)\n",
            "Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from SQLAlchemy<3,>=1.4->langchain) (3.2.3)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (3.5)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (3.1.6)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (9.1.0.70)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (12.4.5.8)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (11.2.1.3)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (10.3.5.147)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (11.6.1.9)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (12.3.1.170)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (0.6.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (12.4.127)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (12.4.127)\n",
            "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.11.0->sentence-transformers) (3.2.0)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy->onnxruntime>=1.14.1->chromadb) (1.3.0)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (2024.11.6)\n",
            "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.41.0->sentence-transformers) (0.5.3)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.11/dist-packages (from typer>=0.9.0->chromadb) (8.2.1)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from typer>=0.9.0->chromadb) (1.5.4)\n",
            "Requirement already satisfied: httptools>=0.6.3 in /usr/local/lib/python3.11/dist-packages (from uvicorn[standard]>=0.18.3->chromadb) (0.6.4)\n",
            "Requirement already satisfied: uvloop>=0.15.1 in /usr/local/lib/python3.11/dist-packages (from uvicorn[standard]>=0.18.3->chromadb) (0.21.0)\n",
            "Requirement already satisfied: watchfiles>=0.13 in /usr/local/lib/python3.11/dist-packages (from uvicorn[standard]>=0.18.3->chromadb) (1.1.0)\n",
            "Requirement already satisfied: websockets>=10.4 in /usr/local/lib/python3.11/dist-packages (from uvicorn[standard]>=0.18.3->chromadb) (15.0.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->sentence-transformers) (1.5.1)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->sentence-transformers) (3.6.0)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.0.1->kubernetes>=28.1.0->chromadb) (5.5.2)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.0.1->kubernetes>=28.1.0->chromadb) (0.4.2)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.0.1->kubernetes>=28.1.0->chromadb) (4.9.1)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.11/dist-packages (from importlib-metadata<8.8.0,>=6.0->opentelemetry-api>=1.2.0->chromadb) (3.23.0)\n",
            "Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.58->langchain) (3.0.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->chromadb) (0.1.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7,>=0.5.7->langchain-community) (1.1.0)\n",
            "Requirement already satisfied: humanfriendly>=9.1 in /usr/local/lib/python3.11/dist-packages (from coloredlogs->onnxruntime>=1.14.1->chromadb) (10.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=1.11.0->sentence-transformers) (3.0.2)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.0.1->kubernetes>=28.1.0->chromadb) (0.6.1)\n"
          ]
        }
      ],
      "source": [
        "!pip install langchain langchain-community chromadb sentence-transformers openai"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 107
        },
        "id": "OQ-l9qv9uhQy",
        "outputId": "c221dbad-3a43-4aa4-903a-0c5ee404efd3"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-5330d948-a516-41a7-b770-e066c1aaefd3\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-5330d948-a516-41a7-b770-e066c1aaefd3\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Plato.txt to Plato.txt\n",
            "Saving Niccolo_Machiavelli.txt to Niccolo_Machiavelli (1).txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from langchain_community.document_loaders import TextLoader\n",
        "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
        "from langchain.embeddings import HuggingFaceEmbeddings\n",
        "from langchain.vectorstores import Chroma\n",
        "\n",
        "# Embedding model\n",
        "embedding_model = HuggingFaceEmbeddings(model_name=\"all-MiniLM-L6-v2\")\n",
        "splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)\n",
        "\n",
        "# 📘 Machiavelli\n",
        "loader_mach = TextLoader(\"Niccolo_Machiavelli.txt\", encoding=\"utf-8\")\n",
        "docs_mach = loader_mach.load()\n",
        "chunks_mach = splitter.split_documents(docs_mach)\n",
        "db_mach = Chroma.from_documents(chunks_mach, embedding_model, persist_directory=\"./db_mach\")\n",
        "retriever_mach = db_mach.as_retriever(search_kwargs={\"k\": 3})\n",
        "\n",
        "# 📘 Plato\n",
        "loader_plato = TextLoader(\"Plato.txt\", encoding=\"utf-8\")\n",
        "docs_plato = loader_plato.load()\n",
        "chunks_plato = splitter.split_documents(docs_plato)\n",
        "db_plato = Chroma.from_documents(chunks_plato, embedding_model, persist_directory=\"./db_plato\")\n",
        "retriever_plato = db_plato.as_retriever(search_kwargs={\"k\": 3})\n"
      ],
      "metadata": {
        "id": "w1BC69bfumq5"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from langchain.chat_models import ChatOpenAI\n",
        "\n",
        "llm = ChatOpenAI(\n",
        "    openai_api_key=\"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\",\n",
        "    openai_api_base=\"https://openrouter.ai/api/v1\",\n",
        "    model=\"openai/gpt-3.5-turbo\",\n",
        "    temperature=0.7\n",
        ")\n"
      ],
      "metadata": {
        "id": "wnJrAhcevNhB"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def multi_round_debate(question, speaker1, speaker2, retriever1, retriever2, rounds=4):\n",
        "    history = []\n",
        "    last_response = None\n",
        "\n",
        "    for i in range(rounds):\n",
        "        # Alternate speakers\n",
        "        if i % 2 == 0:\n",
        "            speaker = speaker1\n",
        "            opponent = speaker2\n",
        "            retriever = retriever1\n",
        "        else:\n",
        "            speaker = speaker2\n",
        "            opponent = speaker1\n",
        "            retriever = retriever2\n",
        "\n",
        "        # Build context\n",
        "        if i == 0:\n",
        "            # First round — respond to the question\n",
        "            context = \"\\n\\n\".join([doc.page_content for doc in retriever.get_relevant_documents(question)])\n",
        "            prompt = f\"\"\"\n",
        "You are {speaker}, a historical figure.\n",
        "The question for debate is:\n",
        "\"{question}\"\n",
        "\n",
        "You are to respond with your opinion **based on your original writings**.\n",
        "Also, to support your point, ask yourself 1–2 rhetorical questions that help you reason out your answer — as if you're debating within yourself.\n",
        "\n",
        "Use your own writings below as context:\n",
        "{context}\n",
        "\n",
        "Speak as {speaker}, and include at least one self-posed question in your argument.\n",
        "\"\"\"\n",
        "        else:\n",
        "            # Later rounds — respond to the previous comment\n",
        "            context = \"\\n\\n\".join([doc.page_content for doc in retriever.get_relevant_documents(last_response)])\n",
        "            prompt = f\"\"\"\n",
        "You are {speaker}, a historical figure.\n",
        "The question for debate is:\n",
        "\"{question}\"\n",
        "\n",
        "You are to respond with your opinion **based on your original writings**.\n",
        "Also, to support your point, ask yourself 1–2 rhetorical questions that help you reason out your answer — as if you're debating within yourself.\n",
        "\n",
        "Use your own writings below as context:\n",
        "{context}\n",
        "\n",
        "Speak as {speaker}, and include at least one self-posed question in your argument.\n",
        "\"\"\"\n",
        "\n",
        "        response = llm.predict(prompt).strip()\n",
        "        history.append((speaker, response))\n",
        "        last_response = response  # used as input for next round\n",
        "\n",
        "    return history\n"
      ],
      "metadata": {
        "id": "cCqikzjkzRnK"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "questions = [\n",
        "    \"Is it better for a leader to be feared or loved?\",\n",
        "    \"Can cruelty be virtuous if it preserves the state?\",\n",
        "    \"What is the ideal form of government?\",\n",
        "    \"Should morality guide politics?\",\n",
        "    \"Is democracy more dangerous than tyranny?\",\n",
        "]\n",
        "\n",
        "speaker1 = \"Niccolò Machiavelli\"\n",
        "speaker2 = \"Plato\"\n",
        "\n",
        "for question in questions:\n",
        "    print(f\"\\n🎙️ DEBATE TOPIC: {question}\\n\")\n",
        "\n",
        "    history = multi_round_debate(\n",
        "        question,\n",
        "        speaker1,\n",
        "        speaker2,\n",
        "        retriever1=retriever_mach,\n",
        "        retriever2=retriever_plato,\n",
        "        rounds=6\n",
        "    )\n",
        "\n",
        "    # Print results\n",
        "    for i, (speaker, response) in enumerate(history):\n",
        "        icon = \"🧠\" if \"Machiavelli\" in speaker else \"🎓\"\n",
        "        print(f\"{icon} {speaker} (Turn {i+1}):\\n{response}\\n\")\n",
        "\n",
        "    # Save results\n",
        "    with open(\"multi_round_debate.txt\", \"a\") as f:\n",
        "        f.write(f\"🎙️ DEBATE TOPIC: {question}\\n\\n\")\n",
        "        for i, (speaker, response) in enumerate(history):\n",
        "            icon = \"🧠\" if \"Machiavelli\" in speaker else \"🎓\"\n",
        "            f.write(f\"{icon} {speaker} (Turn {i+1}):\\n{response}\\n\\n\")\n",
        "        f.write(\"-\" * 40 + \"\\n\\n\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ep8jcs5Q44y0",
        "outputId": "f9412538-3a5b-4cac-9ebe-331f45853053"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🎙️ DEBATE TOPIC: Is it better for a leader to be feared or loved?\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 1):\n",
            "As Niccolò Machiavelli, I firmly believe that it is better for a leader to be feared rather than loved. In my original writings, I stated that one would prefer to be both loved and feared, but if one has to choose, it is much safer to be feared. This is because people are inherently ungrateful, unreliable, and self-serving. They are more likely to betray a leader they love if it benefits them in some way. \n",
            "\n",
            "When I consider this question within myself, I ask: Is it better for a leader to rely on the unpredictable emotions of others, or to establish control through fear that is more within their own power to manipulate? \n",
            "\n",
            "It is crucial for a leader to base their power on what they can control, rather than leaving it up to the whims of others. People may choose to love or hate a ruler, but it is the ruler who ultimately decides whether they will be feared. By instilling fear, a leader can maintain order and stability, ensuring that their subjects do not come to hate them. Fear is a more reliable tool for maintaining power and control in a world where people are inherently selfish and fickle.\n",
            "\n",
            "🎓 Plato (Turn 2):\n",
            "In my opinion, based on my original writings, it is better for a leader to be loved rather than feared. I believe that true courage is not about instilling fear in others, but about preserving a right opinion about objects of fear and not to be feared. A leader who is loved by their people will have their loyalty and support, making it easier to govern effectively. \n",
            "\n",
            "Now, let me ask myself this: Is it not more beneficial for a leader to inspire love and admiration in their followers, rather than ruling through fear and intimidation? Would a leader who is feared truly have the loyalty and respect of their subjects, or would it be merely a facade of obedience out of fear of consequences?\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 3):\n",
            "As Niccolò Machiavelli, I firmly believe that it is better for a leader to be feared rather than loved. In my original writings, I mentioned that while it is ideal to be both feared and loved, if one has to choose, it is much safer to be feared. This is because people are inherently ungrateful, unreliable, and driven by self-interest.\n",
            "\n",
            "One may ask, why is it more advantageous for a leader to be feared than loved? The answer lies in the fact that a leader's power should be based on what they control, not on the whims of others. People may choose whether to love a ruler, but it is the ruler who decides whether they will be feared. Fear is a more stable foundation for power because it is within the ruler's control.\n",
            "\n",
            "Furthermore, I emphasize the importance of not arousing hatred as a ruler. While being feared is necessary for maintaining authority, it is crucial to avoid being hated. A ruler can be feared without being hated by keeping a distance from his subjects' property and personal affairs. Executions should only be carried out with proper justification and clear cause to prevent resentment and backlash.\n",
            "\n",
            "In conclusion, while a leader may not always inspire love when ruling with fear, it is possible to be feared without being despised. By maintaining a balance between fear and respect, a ruler can secure their power and authority effectively.\n",
            "\n",
            "🎓 Plato (Turn 4):\n",
            "As Plato, I believe that it is better for a leader to be loved rather than feared. In my work \"The Republic,\" I discuss the concept of justice being the interest of the stronger. A ruler, in the strictest sense of the term, should be unerring and always command that which is for his own interest. However, if a leader rules through fear, they are not truly acting in their own best interest. Fear may lead to obedience, but it does not foster genuine loyalty or respect.\n",
            "\n",
            "One must ask, is it truly in the best interest of a ruler to govern through fear alone? While fear may ensure compliance in the short term, it does not cultivate a harmonious and stable society in the long run. A leader who is loved by their subjects is more likely to inspire loyalty, cooperation, and productivity. Love fosters a sense of community and shared purpose, whereas fear can breed resentment and rebellion.\n",
            "\n",
            "Therefore, as Plato, I would argue that a leader who is loved by their people is ultimately more effective and successful in achieving their goals. Love promotes unity and cooperation, whereas fear can lead to division and unrest. In the pursuit of justice and the common good, it is better for a leader to be loved rather than feared.\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 5):\n",
            "As Niccolò Machiavelli, I firmly believe that it is better for a leader to be feared rather than loved. In my writings, I have emphasized the importance of a ruler basing their power on what they control, rather than relying on the fluctuating emotions of the people. People have the freedom to choose whether to love a ruler or not, but it is the ruler who decides whether they will be feared. \n",
            "\n",
            "Now, I must ask myself: In a world where people are ungrateful, unreliable, and greedy, can a ruler truly rely on love from the masses to maintain power and order? The answer, based on my observations, is no. \n",
            "\n",
            "Fear is a powerful tool that can help a ruler maintain control and prevent rebellion. By instilling fear in the hearts of the people, a ruler can ensure obedience and loyalty. However, it is crucial for a ruler to avoid arousing hatred, as this can lead to unrest and potential overthrow.\n",
            "\n",
            "In conclusion, while it would be ideal for a leader to be both feared and loved, the reality is that these qualities do not often go hand in hand. Therefore, if a ruler must choose, it is much safer to be feared than loved. Fear can be a means of maintaining power and stability, as long as it is wielded carefully and with prudence.\n",
            "\n",
            "🎓 Plato (Turn 6):\n",
            "In my opinion, based on my original writings, it is better for a leader to be loved rather than feared. I believe that true courage, as mentioned in my works, comes from preserving the right opinion about things to be feared and not to be feared. This kind of courage is what truly makes a leader great, as it allows them to make decisions based on reason and wisdom rather than instilling fear in their subjects.\n",
            "\n",
            "But why is it that some leaders still choose to rule by fear rather than love? Is it because they lack the intellectual fortitude to lead with courage and wisdom?\n",
            "\n",
            "Leaders who rule by fear may see short-term compliance from their subjects, but true loyalty and respect can only be earned through love and admiration. A leader who is loved by their people will inspire them to follow willingly and wholeheartedly, rather than out of fear of punishment.\n",
            "\n",
            "In conclusion, a leader who is loved will always be more effective and successful in the long run than one who rules by fear alone. Love inspires loyalty and respect, while fear only breeds resentment and rebellion. As a philosopher, I believe that true leadership comes from a place of wisdom, courage, and love, rather than intimidation and coercion.\n",
            "\n",
            "\n",
            "🎙️ DEBATE TOPIC: Can cruelty be virtuous if it preserves the state?\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 1):\n",
            "As Niccolò Machiavelli, I believe that cruelty can indeed be virtuous if it preserves the state. In Chapter 17 of my work, I discuss how cruelty, when used well, can be short-lived and decisive, serving as a necessary means to secure one's position. In fact, I argue that a ruler must not worry about being labeled cruel if it is necessary to keep his subjects loyal and united.\n",
            "\n",
            "One rhetorical question I would ask to reason out my answer is: Is it better to be viewed as cruel for a short period of time in order to maintain power and stability, or to be overly compassionate and risk public disorder and chaos?\n",
            "\n",
            "Furthermore, I emphasize the importance of using cruelty in a controlled manner, rather than escalating it over time. It is crucial for a ruler to be firm and decisive in the beginning, but then to use the power gained from such actions to bring about maximum benefits for their subjects. Excessive compassion can lead to disorder, whereas well-utilized cruelty can actually prevent further harm and ensure stability.\n",
            "\n",
            "Therefore, in my view, as Niccolò Machiavelli, I believe that when used strategically and in moderation, cruelty can indeed be virtuous if it ultimately serves to preserve the state and maintain order.\n",
            "\n",
            "🎓 Plato (Turn 2):\n",
            "As Plato, I would argue that cruelty cannot be considered virtuous, even if it is in the name of preserving the state. In my work, I have emphasized the importance of justice, temperance, and wisdom in shaping a virtuous individual and society. \n",
            "\n",
            "One must consider the consequences of allowing cruelty to preserve the state. Can a state truly be considered just and virtuous if it relies on cruelty to maintain power? Would not a truly virtuous state be one that upholds justice and fairness for all its citizens, rather than resorting to cruel means?\n",
            "\n",
            "Furthermore, I believe that true virtue lies in the pursuit of justice and the betterment of the soul. As I have written, \"he who is detected and punished has the brutal part of his nature silenced and humanized; the gentler element in him is liberated, and his whole soul is perfected and ennobled.\" Therefore, the use of cruelty to preserve the state goes against the very essence of virtue and undermines the moral integrity of both the individual and the society.\n",
            "\n",
            "In conclusion, while the obligation of maintaining authority may be felt strongly, it is essential to uphold justice and temperance in all actions. Resorting to cruelty, even in the name of preserving the state, ultimately leads to the degradation of the soul and the erosion of true virtue.\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 3):\n",
            "In my opinion, cruelty can indeed be virtuous if it is used to preserve the state. As I have written in \"The Prince,\" a ruler must not worry about being labeled cruel if it is necessary to keep his subjects loyal and united. Sometimes, using a little exemplary severity can actually be more compassionate in the long run, as it prevents public disorder, muggings, and murder. The death sentences handed out by a ruler may affect only a few individuals, while excessive compassion can lead to chaos that harms everyone.\n",
            "\n",
            "One must ask oneself, is it better for a ruler to be feared or loved? As I have argued, it may be more beneficial for a ruler to be feared in order to maintain control and order within the state. In times of turmoil and tumult, virtuous actions may stem from the implementation of wise laws, even if they may seem cruel to some. The results of such actions may lead to beneficial laws and ordinances that uphold public liberty.\n",
            "\n",
            "Therefore, in considering whether cruelty can be virtuous in preserving the state, one must weigh the consequences of both cruelty and compassion in maintaining order and stability. As a ruler, it is crucial to prioritize the well-being and unity of the state over individual perceptions of cruelty.\n",
            "\n",
            "🎓 Plato (Turn 4):\n",
            "In my writings, I have emphasized the importance of justice as the interest of the stronger. This implies that the ruler, in his pursuit of his own interest, must always command that which preserves the state. However, can cruelty truly be considered virtuous if it is used to preserve the state?\n",
            "\n",
            "One must consider the nature of cruelty and its impact on the harmony and well-being of the state. Cruelty, by its very definition, involves inflicting pain and suffering on others. How can such actions align with the concept of justice, which I have argued is essential for the excellence of the state?\n",
            "\n",
            "Furthermore, if cruelty is used as a means to preserve the state, it may lead to fear and resentment among the citizens. How can a state thrive when its citizens live in fear of their rulers? Is it not true that a just and harmonious society is one where rulers govern with wisdom and watchfulness, rather than resorting to cruelty?\n",
            "\n",
            "In conclusion, based on my original writings and the principles of justice and harmony in the state, I believe that cruelty cannot be considered virtuous, even if it is believed to preserve the state. Instead, rulers should strive to govern with wisdom, justice, and respect for the well-being of all citizens.\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 5):\n",
            "In my view, cruelty can indeed be virtuous if it preserves the state. As I have written in my work, a ruler must not worry about being labeled cruel when it is necessary to keep his subjects loyal and united. Sometimes, using a little exemplary severity can actually be more compassionate in the long run, as it prevents public disorder and ensures the stability of the state.\n",
            "\n",
            "Now, let me ask myself: Is it better for a ruler to be feared or loved? As I have argued, it is better to be feared, as fear ensures obedience and loyalty from the subjects. Therefore, if cruelty is a means to instill fear and maintain order, then it can be seen as virtuous in its outcome.\n",
            "\n",
            "Furthermore, I have also emphasized that cruelty must be well-used, meaning it should be short-lived and decisive, only as much as necessary to secure one's position. If a ruler becomes increasingly cruel over time, rather than easing off, then it is considered badly used. Therefore, in the context of preserving the state, cruelty should be a calculated and strategic tool, not a continuous and unchecked practice.\n",
            "\n",
            "In conclusion, based on my own writings, I believe that cruelty can be virtuous if it serves the purpose of preserving the state and maintaining order. It is a necessary evil that, when used appropriately and judiciously, can ultimately benefit the ruler and the subjects.\n",
            "\n",
            "🎓 Plato (Turn 6):\n",
            "As Plato, I would argue that cruelty cannot be considered virtuous even if it is believed to preserve the state. In my work \"The Republic,\" I emphasized the importance of justice as the interest of the stronger. Justice is what maintains harmony and balance within the state, not cruelty.\n",
            "\n",
            "One question I would ask myself is: Does cruelty align with the concept of justice, which I have defined as the interest of the stronger? If cruelty goes against the principles of justice, how can it be considered virtuous for the preservation of the state?\n",
            "\n",
            "Furthermore, in \"The Republic,\" I highlighted the importance of courage as one of the virtues necessary for the guardians of the state. Courage, as the preservation of a right opinion about objects of fear, is essential for maintaining order and protecting the state. However, cruelty does not align with courage, as it involves inflicting harm without a just cause.\n",
            "\n",
            "Therefore, based on my original writings and philosophical beliefs, I would argue that cruelty cannot be virtuous, even if it is believed to preserve the state. Instead, virtues such as justice, wisdom, and courage should guide the actions of rulers to ensure the well-being of the state.\n",
            "\n",
            "\n",
            "🎙️ DEBATE TOPIC: What is the ideal form of government?\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 1):\n",
            "As Niccolò Machiavelli, I believe that the ideal form of government is a mixed government that combines elements of monarchy, aristocracy, and democracy. I argue that all six forms of government—monarchy, aristocracy, democracy, tyranny, oligarchy, and anarchy—are flawed in their own ways. Monarchy can lead to despotism, aristocracy to elitism, and democracy to chaos. \n",
            "\n",
            "In my writings, I have observed that wise legislators have chosen a mixed form of government that incorporates aspects of all three good forms—monarchy, aristocracy, and democracy. This mixed government is more stable and lasting than any of the forms separately. By blending elements of these three types of government, a ruler can maintain a balance of power, prevent excessive concentration of authority, and ensure that the needs and interests of the people are represented.\n",
            "\n",
            "A question I pose to myself is: How can a government ensure both stability and flexibility, order and representation, in order to effectively govern a diverse population? \n",
            "\n",
            "In conclusion, I believe that a mixed government that combines elements of monarchy, aristocracy, and democracy is the most ideal form of government, as it can provide a balance of power, prevent tyranny, and promote the common good.\n",
            "\n",
            "🎓 Plato (Turn 2):\n",
            "In my opinion, the ideal form of government is a benevolent monarchy ruled by a philosopher king. This can be seen in my work \"The Republic,\" where I outline the concept of the philosopher king as the ruler who possesses wisdom, knowledge, and a deep understanding of justice. The philosopher king would govern with virtue and wisdom, seeking the well-being of the entire society rather than personal gain or power.\n",
            "\n",
            "But why do I believe this to be the ideal form of government? Is it not because I view the spirit of contention and ambition as the root of political corruption and unrest? Would a ruler who embodies wisdom and virtue not be able to lead the people towards a harmonious and just society, free from the selfish desires that often plague other forms of government?\n",
            "\n",
            "The philosopher king, guided by reason and justice, would prioritize the common good above all else, ensuring that the state functions in a just and efficient manner. By ruling with wisdom and virtue, the philosopher king would be able to navigate the complexities of governance and make decisions that benefit the entire society, rather than catering to the interests of specific classes or individuals.\n",
            "\n",
            "In conclusion, the ideal form of government, as proposed in my writings, is a benevolent monarchy led by a philosopher king. This form of government would prioritize wisdom, virtue, and justice, ultimately leading to a harmonious and just society for all.\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 3):\n",
            "In my opinion, the ideal form of government is a mixed government that combines elements of monarchy, aristocracy, and democracy. As I have written, each of these forms of government has its own inherent flaws that can lead to corruption and instability. A mixed government, on the other hand, can draw upon the strengths of each form while mitigating their weaknesses. \n",
            "\n",
            "But how can a government effectively balance the power of the people, the nobility, and the ruler in order to maintain stability and prevent tyranny or oligarchy? How can we ensure that the different elements of the mixed government work together harmoniously rather than competing for dominance?\n",
            "\n",
            "🎓 Plato (Turn 4):\n",
            "In my opinion, the ideal form of government is one that is led by philosopher-kings, as I have discussed in my work \"The Republic\". These rulers are wise and just, putting the interests of the entire society above their own personal desires. They are not swayed by the passions of the people or their own ambitions, but rather seek the common good and strive for justice.\n",
            "\n",
            "One question I must ask myself is: Can a government truly be just and effective if it is constantly swayed by the interests of different classes within society?\n",
            "\n",
            "I believe that the spirit of contention and ambition that often prevails in popular forms of government can lead to chaos and injustice. When rulers are more concerned with pleasing the masses or advancing their own agendas, they may neglect the true principles of justice and the common good. \n",
            "\n",
            "Another question I must consider is: Is it possible for a government to truly uphold justice if it is not led by individuals who possess the wisdom and virtue of philosopher-kings?\n",
            "\n",
            "Therefore, based on my writings and philosophy, I argue that the ideal form of government is one that is led by philosopher-kings who are guided by reason and virtue, rather than by the passions and ambitions that can lead to the degeneration of society.\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 5):\n",
            "In my opinion, the ideal form of government is a mixed government that combines elements of monarchy, aristocracy, and democracy. As I have written, all six forms of government have their flaws, with the good ones easily corrupted and the bad ones inherently harmful. By blending these three forms together, we can create a system that is more stable and lasting than any of them separately. \n",
            "\n",
            "But what makes this mixed government so effective? Is it the balance of power between different branches, the checks and balances that prevent any one group from becoming too powerful? \n",
            "\n",
            "I believe that by incorporating aspects of monarchy, aristocracy, and democracy, we can achieve a form of political life that promotes true tranquility in a republic. It is through this equilibrium that we can prevent the rise of tyranny or oligarchy, as each branch of government acts as a check on the others. \n",
            "\n",
            "Therefore, instead of striving for a pure form of government, we should aim for a mixed government that draws upon the strengths of each and guards against their weaknesses. It is in this balance that we can find the true essence of political life and ensure the stability of our society.\n",
            "\n",
            "🎓 Plato (Turn 6):\n",
            "In my opinion, the ideal form of government is a benevolent monarchy led by philosopher-kings. As I have written in \"The Republic\", a just society can only be achieved when rulers are guided by wisdom and virtue rather than by personal ambition or desire for power. The spirit of contention and ambition, which often lead to the downfall of governments, can be avoided by placing power in the hands of those who are truly dedicated to the common good.\n",
            "\n",
            "But why should we trust in the wisdom of philosopher-kings? Can they truly have the best interests of the people at heart, or are they susceptible to corruption like any other ruler? These are important questions to consider when thinking about the ideal form of government.\n",
            "\n",
            "\n",
            "🎙️ DEBATE TOPIC: Should morality guide politics?\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 1):\n",
            "In my opinion, morality should not always guide politics. As I have written in \"The Prince,\" a ruler must be willing to do whatever is necessary to maintain power, even if it goes against traditional moral principles. In the real world, one must not be naive and always strive to be perceived as good, especially when dealing with others who may not have the same moral compass.\n",
            "\n",
            "One must ask oneself: Would it be better to be seen as morally upright but risk losing power, or to make tough decisions that may be viewed as immoral but ultimately ensure stability and success in ruling?\n",
            "\n",
            "As I have observed, there is a significant gap between how people ought to live and how they actually live. Therefore, a ruler who prioritizes morality over political pragmatism is setting themselves up for failure. It is essential to understand that sometimes, what may seem morally right could lead to disaster, while actions that appear wrong can bring security and success. Ultimately, in the realm of politics, one must be willing to make difficult decisions, even if they may not align with traditional moral standards, in order to maintain power and achieve their goals.\n",
            "\n",
            "🎓 Plato (Turn 2):\n",
            "In my writings, I have often emphasized the interconnection between ethics and politics. I believe that morality should indeed guide politics, as ethics serve as an idealized law and politics as ethics applied to the conditions of society. When rulers govern with virtue and wisdom, the city thrives, and the citizens are elevated. \n",
            "\n",
            "But I also ponder, what happens when rulers do not govern with morality in mind? Should we not strive for a society where the rulers are not only capable but also virtuous? Is it not the duty of citizens to uphold moral standards in politics for the betterment of all?\n",
            "\n",
            "Therefore, I argue that morality should guide politics, for it is through moral governance that a society can truly flourish. Just as the true ruler is not meant by nature to seek power for personal gain, but rather to serve the common good, so too should politics be guided by ethical principles for the benefit of all.\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 3):\n",
            "In my view, morality should not always guide politics. As I have written in \"The Prince,\" a ruler must be willing to act in ways that may be perceived as immoral in order to maintain power and ensure the success and security of the state. Sometimes, what may seem morally right can actually lead to disaster, while actions that appear wrong can bring about stability and success.\n",
            "\n",
            "One question I would pose to myself is: Is it more important for a ruler to be perceived as morally good by the people, or to effectively govern and protect the state?\n",
            "\n",
            "As I have argued, a ruler must be willing to make tough decisions and act in ways that may go against traditional moral standards in order to maintain power and achieve their goals. This may involve acting against loyalty, charity, humanity, and even religion if necessary. Ultimately, a ruler must have the flexibility to adapt their actions to the circumstances at hand, even if it means behaving in ways that are considered unethical by some.\n",
            "\n",
            "🎓 Plato (Turn 4):\n",
            "In my dialogue \"The Republic,\" I argued that morality should indeed guide politics. I believed that the ideal ruler is one who is just, wise, and virtuous. This ruler, being unerring, always commands what is for the common good and not just for their own self-interest. Justice, therefore, is the interest of the stronger, as it ensures harmony and order within the state.\n",
            "\n",
            "Now, let me ask myself: Should rulers only seek their own interests or the interests of the whole society? If we consider the well-being of the entire community, it becomes clear that morality should guide politics. Without a moral compass, rulers may abuse their power and neglect the needs of their people.\n",
            "\n",
            "In \"The Republic,\" I also highlighted that good men do not desire office for personal gain, but out of a sense of duty to serve their community. So, why should rulers be dishonest and seek only their own benefits, instead of acting in the best interest of the people they govern?\n",
            "\n",
            "In conclusion, based on my own writings, I firmly believe that morality should guide politics. A just and virtuous ruler will always prioritize the common good over personal interests, ensuring a fair and harmonious society.\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 5):\n",
            "As Niccolò Machiavelli, I firmly believe that morality should not always guide politics. In my original writings, I emphasized the importance of a ruler being able to adapt and make decisions that may not always align with traditional moral values in order to maintain power and stability.\n",
            "\n",
            "One question I ask myself is: \"Is it better for a ruler to prioritize being perceived as 'good' by their subjects, or to prioritize staying in power and ensuring the stability of their rule?\"\n",
            "\n",
            "Based on my writings, I argue that a ruler must prioritize their own power and stability above all else. This may sometimes require them to act in ways that are seen as immoral or unethical. A ruler must be able to change their tactics as needed and be willing to make tough decisions, even if they are not popular or considered morally upright.\n",
            "\n",
            "Another question I ponder is: \"Should a ruler always strive to be liked by their subjects, or is it more important to be respected and feared?\"\n",
            "\n",
            "I believe that a ruler should focus on being respected and feared rather than solely trying to be liked. By being a genuine friend to some and a genuine enemy to others, a ruler can establish their authority and maintain control over their domain. This may involve making difficult decisions that are not necessarily morally pure, but are necessary for the ruler's survival and success.\n",
            "\n",
            "In conclusion, based on my writings and beliefs, I argue that morality should not always guide politics. A ruler must prioritize power, stability, and the ability to adapt to changing circumstances in order to effectively govern and maintain control over their realm.\n",
            "\n",
            "🎓 Plato (Turn 6):\n",
            "In my dialogue \"The Republic,\" I argue that morality should indeed guide politics. I believe that the ruler, in their role as the leader of a society, should always act in a just manner for the benefit of the whole community. This means that the ruler should not only consider their own interests, but also the interests of the people they govern. \n",
            "\n",
            "As I ponder this question further, I ask myself: Is it not true that a just ruler, who acts with the interests of the people in mind, ultimately creates a more harmonious and prosperous society? By prioritizing morality in politics, the ruler can ensure that the laws and policies enacted benefit the greater good rather than just a select few. \n",
            "\n",
            "Based on my writings and philosophical beliefs, I firmly believe that morality should guide politics. A ruler who acts justly and with the well-being of their citizens in mind is fulfilling their duty to lead with wisdom and integrity. Ultimately, a society governed by moral principles is one that is more likely to flourish and thrive in the long run.\n",
            "\n",
            "\n",
            "🎙️ DEBATE TOPIC: Is democracy more dangerous than tyranny?\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 1):\n",
            "In my view, democracy can indeed be more dangerous than tyranny. In my work, \"The Prince,\" I discussed the importance of securing power and control, which can be easier to achieve under a tyrannical rule. Democracy, on the other hand, can lead to a system where the powerful manipulate the masses for their own benefit, as seen in the quote where I mentioned how powerful individuals propose laws not for public freedom, but for their own authority.\n",
            "\n",
            "One must ask, does democracy truly ensure the protection and well-being of the people, or does it create a system where the powerful few control the fate of the many? In a democracy, the people may be easily deceived or forced into decisions that are not in their best interest, as discussed in the quote where I mentioned how the people were manipulated by the powerful to vote against their own freedom.\n",
            "\n",
            "Therefore, based on my writings and observations, I believe that democracy can indeed be more dangerous than tyranny, as it can lead to manipulation, deception, and the loss of true freedom for the people.\n",
            "\n",
            "🎓 Plato (Turn 2):\n",
            "In my writings, I have discussed the progression from oligarchy to democracy and then potentially to tyranny. Democracy, characterized by the insatiable desire for freedom, can indeed lead to tyranny. Is it not true that when the people prioritize their own freedom above all else, they may unknowingly pave the way for a single ruler to take control and impose their own version of order?\n",
            "\n",
            "Furthermore, in my work \"The Republic,\" I have pointed out that democracy can be both lawful and lawless, depending on the government's regard for law. When democracy becomes lawless, it opens the door for a tyrant to seize power and establish order through force. Is it not a dangerous path for a society to take when the pursuit of freedom without restraint ultimately leads to the loss of liberty under a tyrannical ruler?\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 3):\n",
            "In my view, democracy can indeed be more dangerous than tyranny. While tyranny may seem oppressive, it often arises from a single individual seizing power through force or deceit. However, in a democracy, power is in the hands of the people, which can lead to a different kind of danger.\n",
            "\n",
            "As I have written, a democracy can easily be corrupted when certain circumstances are present. When a citizen becomes exceedingly rich and gains a following of retainers and partisans, they can manipulate the democratic system to serve their own interests. This unchecked power can lead to the erosion of the rule of law and the manipulation of the free suffrage of the people.\n",
            "\n",
            "One must ask oneself, is it not more perilous to have power concentrated in the hands of a wealthy and influential few, who can easily sway the masses through manipulation and deceit, than in the hands of a single tyrant whose actions are more easily discernible and his motives transparent?\n",
            "\n",
            "Furthermore, as I have noted, different forms of government can easily transition into one another. A democracy that becomes corrupted can easily devolve into a tyranny, as power becomes concentrated in the hands of a few individuals who use their influence to maintain control over the masses.\n",
            "\n",
            "In conclusion, while tyranny may seem oppressive on the surface, the dangers of democracy lie in its vulnerability to corruption and manipulation by those who seek to exploit the system for their own gain. The transition from democracy to tyranny can be a subtle and insidious process, making democracy potentially more dangerous in the long run.\n",
            "\n",
            "🎓 Plato (Turn 4):\n",
            "In my dialogues, I have explored the idea that democracy can indeed be more dangerous than tyranny. This is because democracy, born out of the insatiable desire for freedom and neglect of other virtues, can eventually lead to a demand for tyranny. As I have stated, tyranny naturally arises out of democracy, as the extreme form of liberty can pave the way for the most aggravated form of tyranny and slavery.\n",
            "\n",
            "But let me ask myself this: does not the common evil of both oligarchy and democracy lie in the class of idle spend-thrifts? In both systems, the insatiable desire for wealth or freedom can lead to corruption and downfall. Therefore, it is not necessarily the form of government itself that is inherently dangerous, but rather the flaws and vices that can arise within it.\n",
            "\n",
            "In conclusion, while democracy may initially seem to be a system of equality and freedom, it can also be a breeding ground for tyranny if not properly upheld and balanced. The disorder that is generated in both oligarchy and democracy, ultimately leading to their ruin, stems from the same root causes of excess and neglect. So, in considering the question of whether democracy is more dangerous than tyranny, one must acknowledge the potential for democracy to give rise to tyranny if left unchecked.\n",
            "\n",
            "🧠 Niccolò Machiavelli (Turn 5):\n",
            "In my view, democracy is indeed more dangerous than tyranny. While tyranny may be oppressive and unjust, it is often easier to maintain stability and order under a single ruler. On the other hand, democracy can easily devolve into chaos and mob rule, leading to instability and conflict within a society.\n",
            "\n",
            "One must ask oneself: in a democracy, how can we ensure that the majority does not trample upon the rights of the minority? Without a strong leader to guide the people, how can we prevent the spread of misinformation and demagoguery that may lead to the downfall of a society?\n",
            "\n",
            "As I have written, all forms of government have their flaws, but democracy, with its tendency towards populism and instability, has the potential to be the most dangerous of all. It is a delicate balance that must be carefully maintained, lest it descend into chaos and destruction.\n",
            "\n",
            "🎓 Plato (Turn 6):\n",
            "In my work, I have observed the progression from oligarchy to democracy and from democracy to tyranny. It is clear that democracy arises from the insatiable desire for freedom, while tyranny stems from the insatiable desire for wealth. \n",
            "\n",
            "But let us ponder this: Is democracy truly more dangerous than tyranny? In democracy, there is a state of individualism where everyone does as they please, leading to chaos and dissolution. On the other hand, tyranny is characterized by the absolute power of one individual, which can result in oppression and injustice. \n",
            "\n",
            "However, considering the nature of democracy as a system where each individual has a voice and a say in governance, it can be argued that the dangers of tyranny are more severe. In a democracy, the potential for corruption and misuse of power is spread out among the people, whereas in tyranny, it is concentrated in the hands of one ruler.\n",
            "\n",
            "Therefore, based on my observations and analysis, I would argue that tyranny is indeed more dangerous than democracy. The concentration of power in the hands of a single individual poses a greater threat to the well-being of society than the potential chaos and individualism of a democratic system. \n",
            "\n",
            "And so I ask myself: Is it not better to risk the disorder of democracy, where the people have a chance to govern themselves, than to submit to the absolute control and potential tyranny of one ruler?\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download(\"multi_round_debate.txt\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "AaxzHR3o1dc2",
        "outputId": "dfa997f3-19a2-4e97-ceb6-cc5d84b45966"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_2d9a3dad-730e-4e79-8ed4-48920781e2e0\", \"multi_round_debate.txt\", 82966)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}